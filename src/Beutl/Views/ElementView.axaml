<UserControl x:Class="Beutl.Views.ElementView"
             xmlns="https://github.com/avaloniaui"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:h="using:Beutl.Helpers"
             xmlns:icons="using:FluentIcons.FluentAvalonia"
             xmlns:lang="using:Beutl.Language"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:p="using:Beutl.Services.PrimitiveImpls"
             xmlns:ui="using:FluentAvalonia.UI.Controls"
             xmlns:vm="using:Beutl.ViewModels"
             x:Name="root"
             Height="{DynamicResource LayerHeight}"
             Margin="{CompiledBinding Margin.Value}"
             Padding="0,1"
             HorizontalAlignment="Stretch"
             VerticalAlignment="Top"
             d:DesignHeight="450"
             d:DesignWidth="800"
             x:CompileBindings="True"
             x:DataType="vm:ElementViewModel"
             ClipToBounds="True"
             Focusable="True"
             mc:Ignorable="d">
    <Border x:Name="border"
            Width="{Binding Width.Value}"
            Margin="{Binding BorderMargin.Value}"
            HorizontalAlignment="Left"
            Background="{Binding Color.Value, Converter={StaticResource ColorToBrushConverter}}"
            BorderThickness="1"
            Classes.elm-disabled="{Binding !IsEnabled.Value}"
            Classes.selected="{Binding IsSelected.Value}">
        <Border.Styles>
            <Style Selector="Border:pressed">
                <Setter Property="Opacity" Value="0.8" />
            </Style>
            <Style Selector="Border.elm-disabled">
                <Setter Property="Opacity" Value="0.5" />
            </Style>
            <Style Selector="Border.elm-disabled:pressed">
                <Setter Property="Opacity" Value="0.4" />
            </Style>
            <Style Selector="Border.selected">
                <Setter Property="BorderBrush" Value="{DynamicResource TextControlForeground}" />
            </Style>
            <Style Selector="Border:not(.selected)">
                <Setter Property="BorderBrush" Value="{Binding RestBorderColor.Value, Converter={StaticResource ColorToBrushConverter}}" />
            </Style>
        </Border.Styles>
        <Border.ContextFlyout>
            <ui:FAMenuFlyout>
                <ui:ToggleMenuFlyoutItem Click="EnableElementClick"
                                         IsChecked="{Binding IsEnabled.Value}"
                                         Text="{x:Static lang:Strings.EnableElement}">
                    <ui:ToggleMenuFlyoutItem.Styles>
                        <Style Selector="ui|ToggleMenuFlyoutItem /template/ Viewbox#IconRoot">
                            <Setter Property="Width" Value="0" />
                        </Style>
                    </ui:ToggleMenuFlyoutItem.Styles>
                </ui:ToggleMenuFlyoutItem>
                <ui:MenuFlyoutItem Command="{Binding Split}" Text="{x:Static lang:Strings.Split}">
                    <ui:MenuFlyoutItem.IconSource>
                        <icons:SymbolIconSource Symbol="SplitVertical" />
                    </ui:MenuFlyoutItem.IconSource>
                </ui:MenuFlyoutItem>
                <ui:MenuFlyoutItem x:Name="splitByCurrent"
                                   Command="{Binding SplitByCurrentFrame}"
                                   InputGesture="{h:GetCommandGesture Split,
                                                                      ExtensionType={x:Type p:TimelineTabExtension}}"
                                   Text="{x:Static lang:Strings.SplitByCurrentFrame}" />
                <ui:MenuFlyoutItem Command="{Binding Cut}"
                                   InputGesture="{h:GetCommandGesture Cut,
                                                                      ExtensionType={x:Type p:TimelineTabExtension}}"
                                   Text="{x:Static lang:Strings.Cut}">
                    <ui:MenuFlyoutItem.IconSource>
                        <icons:SymbolIconSource Symbol="Cut" />
                    </ui:MenuFlyoutItem.IconSource>
                </ui:MenuFlyoutItem>
                <ui:MenuFlyoutItem Command="{Binding Copy}"
                                   InputGesture="{h:GetCommandGesture Copy,
                                                                      ExtensionType={x:Type p:TimelineTabExtension}}"
                                   Text="{x:Static lang:Strings.Copy}">
                    <ui:MenuFlyoutItem.IconSource>
                        <icons:SymbolIconSource Symbol="Copy" />
                    </ui:MenuFlyoutItem.IconSource>
                </ui:MenuFlyoutItem>
                <ui:MenuFlyoutItem Command="{Binding Delete}"
                                   InputGesture="{h:GetCommandGesture Delete,
                                                                      ExtensionType={x:Type p:TimelineTabExtension}}"
                                   Text="{x:Static lang:Strings.Delete}">
                    <ui:MenuFlyoutItem.IconSource>
                        <icons:SymbolIconSource Symbol="DeleteDismiss" />
                    </ui:MenuFlyoutItem.IconSource>
                </ui:MenuFlyoutItem>
                <ui:MenuFlyoutItem Command="{Binding Exclude}"
                                   InputGesture="{h:GetCommandGesture Exclude,
                                                                      ExtensionType={x:Type p:TimelineTabExtension}}"
                                   Text="{x:Static lang:Strings.Exclude}">
                    <ui:MenuFlyoutItem.IconSource>
                        <icons:SymbolIconSource Symbol="Delete" />
                    </ui:MenuFlyoutItem.IconSource>
                </ui:MenuFlyoutItem>
                <ui:MenuFlyoutItem Click="Rename_Click"
                                   InputGesture="{h:GetCommandGesture Rename,
                                                                      ExtensionType={x:Type p:TimelineTabExtension}}"
                                   Text="{x:Static lang:Strings.Rename}">
                    <ui:MenuFlyoutItem.IconSource>
                        <icons:SymbolIconSource Symbol="Rename" />
                    </ui:MenuFlyoutItem.IconSource>
                </ui:MenuFlyoutItem>
                <ui:MenuFlyoutItem x:Name="change2OriginalLength"
                                   Command="{Binding ChangeToOriginalLength}"
                                   Text="{x:Static lang:Strings.ChangeToOriginalLength}" />
                <ui:MenuFlyoutItem Click="ChangeColor_Click" Text="{x:Static lang:Strings.ChangeColor}" />
                <ui:MenuFlyoutSeparator />
                <ui:MenuFlyoutSubItem Text="{x:Static lang:Strings.Animation}">
                    <ui:MenuFlyoutItem Command="{Binding FinishEditingAnimation}" Text="{x:Static lang:Strings.FinishEditing}" />
                    <ui:MenuFlyoutItem Command="{Binding BringAnimationToTop}" Text="{x:Static lang:Strings.BringToTop}" />
                </ui:MenuFlyoutSubItem>
                <ui:MenuFlyoutSeparator />
                <ui:ToggleMenuFlyoutItem Click="UseNodeClick"
                                         IsChecked="{Binding UseNode.Value}"
                                         Text="{x:Static lang:Strings.UseNode}">
                    <ui:ToggleMenuFlyoutItem.Styles>
                        <Style Selector="ui|ToggleMenuFlyoutItem /template/ Viewbox#IconRoot">
                            <Setter Property="Width" Value="0" />
                        </Style>
                    </ui:ToggleMenuFlyoutItem.Styles>
                </ui:ToggleMenuFlyoutItem>
                <ui:MenuFlyoutItem Click="OpenNodeTree_Click" Text="{x:Static lang:Strings.OpenNodeTree}">
                    <ui:MenuFlyoutItem.IconSource>
                        <icons:SymbolIconSource Symbol="Open" />
                    </ui:MenuFlyoutItem.IconSource>
                </ui:MenuFlyoutItem>
                <ui:MenuFlyoutSeparator />
                <ui:MenuFlyoutItem Click="OpenPropertyInNewTab_Click" Text="{x:Static lang:Strings.OpenInNewTab}">
                    <ui:MenuFlyoutItem.IconSource>
                        <icons:SymbolIconSource Symbol="Tab" />
                    </ui:MenuFlyoutItem.IconSource>
                </ui:MenuFlyoutItem>
            </ui:FAMenuFlyout>
        </Border.ContextFlyout>
        <Panel>
            <TextBlock x:Name="textBlock"
                       VerticalAlignment="Center"
                       ClipToBounds="True"
                       Foreground="{Binding TextColor.Value, Converter={StaticResource ColorToBrushConverter}}"
                       Text="{Binding Name.Value}" />
            <TextBox x:Name="textBox"
                     HorizontalAlignment="Stretch"
                     IsVisible="False"
                     Text="{Binding Name.Value}" />
        </Panel>
    </Border>

</UserControl>
